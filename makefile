Makefile — это текстовый файл, содержащий набор правил и команд для автоматизации сборки проекта. В контексте языка программирования Go, Makefile часто используется для упрощения таких задач, как сборка, тестирование, установка зависимостей и запуск утилит.
Основные понятия
Цель (target): Имя задачи, которую нужно выполнить (например, build, test, clean).
Зависимости: Файлы или цели, от которых зависит выполнение задачи.
Рецепт: Команды, которые будут выполняться для достижения цели.
Структура Makefile
makefile
Копировать код
<цель>: <зависимости>
	<команды>
Важно: Команды должны начинаться с табуляции, а не с пробелов.
Пример Makefile для проекта на Go
Рассмотрим типичный пример Makefile для Go-проекта.
makefile
Копировать код
# Указание имени бинарного файла
BINARY_NAME=myapp

# Определение флагов
GOFLAGS=-mod=vendor

# Цель по умолчанию
.PHONY: all
all: build

# Задача для сборки проекта
.PHONY: build
build:
	@echo "==> Building the project..."
	go build $(GOFLAGS) -o $(BINARY_NAME) ./cmd/$(BINARY_NAME)

# Задача для тестирования
.PHONY: test
test:
	@echo "==> Running tests..."
	go test ./... -v

# Задача для установки зависимостей
.PHONY: deps
deps:
	@echo "==> Installing dependencies..."
	go mod tidy
	go mod vendor

# Задача для очистки бинарных файлов
.PHONY: clean
clean:
	@echo "==> Cleaning up..."
	rm -f $(BINARY_NAME)

# Задача для выполнения статического анализа кода
.PHONY: lint
lint:
	@echo "==> Running linters..."
	golangci-lint run ./...

# Задача для форматирования кода
.PHONY: fmt
fmt:
	@echo "==> Formatting code..."
	go fmt ./...

# Задача для запуска приложения
.PHONY: run
run: build
	@echo "==> Running the application..."
	./$(BINARY_NAME)
Разбор Makefile
Переменные:
BINARY_NAME=myapp — задает имя конечного бинарного файла.
GOFLAGS=-mod=vendor — указывает флаги для команды go, например, использование зависимостей из директории vendor.
Цель по умолчанию:
all: build — при вызове make без указания цели, будет выполнена цель build.
Цели и рецепты:
build: Сборка проекта с использованием команды go build. Используются флаги и выходной файл, указанный в переменных.
test: Запуск всех тестов в проекте с выводом подробных результатов.
deps: Установка зависимостей и их сохранение в директорию vendor.
clean: Удаление собранного бинарного файла.
lint: Запуск статического анализатора кода (например, с помощью golangci-lint).
fmt: Форматирование исходного кода согласно правилам Go.
run: Сборка и запуск приложения.
Запуск команд
Запуск отдельных задач осуществляется командами вида:
bash
Копировать код
make <цель>
Например:
make build — собрать проект.
make test — запустить тесты.
make clean — очистить бинарный файл.
Заключение
Makefile для Go-проекта помогает автоматизировать рутинные задачи. Это упрощает процесс разработки и снижает вероятность ошибок при выполнении однотипных действий. Правильно составленный Makefile делает проект более управляемым и удобным для использования как разработчиками, так и CI/CD системами.
